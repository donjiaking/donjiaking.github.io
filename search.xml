<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[LeetCode 18] 4Sum (四数之和)</title>
    <url>/algorithm/18_4Sum/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>
<p><strong>Notice</strong> that the solution set must not contain duplicate quadruplets.</p>
<span id="more"></span>

<h3 id="Wrong-Way"><a href="#Wrong-Way" class="headerlink" title="Wrong Way"></a>Wrong Way</h3><p>由于题目的Tag是HashTable，自然要用<strong>Hash</strong>的方法。</p>
<p>我一开始想把 <code>4Sum</code> 拆成两个 <code>2Sum</code> : </p>
<ol>
<li>遍历 <code>nums</code> , 找出所有不同的2个数字的pair，把它们加到 <code>unordered_map</code> 里面，其中 <code>key</code> 即为两个数字的和，<code>value</code> 是 <code>vector&lt;vector&lt;int&gt;&gt;</code>对象。复杂度为O(n^2)</li>
<li>这样，我们只需每次先确定一个 <code>sum</code> ，找到这个 <code>sum</code> 下的<code>vector&lt;vector&lt;int&gt;&gt;</code>对象v1，然后再找到 <code>target-sum</code> 所对应的<code>vector&lt;vector&lt;int&gt;&gt;</code>对象v2，再两两组合即可。复杂度不会超过O(n^2)</li>
</ol>
<p><strong>错误之处：</strong>“从一个数组中选出4个数”不能简单地认为是两次“从一个数组中选出2个数”再组合。假如给的 <code>nums</code> 没有相同的数字，那么我们只需在第二步两两组合的过程中检查是否有相同的数字即可，有就不要组合，没有就组合，这个算法还是可以实现的。假如有相同的数字，我们不能作预处理“去重”（否则会少一些结果），因此也不能简单地在两两组合的过程中检查是否有相同的数字来解决这个问题。</p>
<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p><strong>Solution 0：</strong>老老实实按照时间复杂度稍微高一点的算法</p>
<ol>
<li><p>还是用一个 <code>unordered_map</code>，不过只是以每个数字为key，出现的次数为value</p>
</li>
<li><p>三层for循环，确定前三个数nums[i], nums[j], nums[k], 再检查target-nums[i]-nums[j]-nums[k]是否在<code>unordered_map</code>里面并且要求target&gt;=nums[k]即可。但是当 <code>nums</code> 有相同的元素出现时, 最后的结果就会出现duplicate quadruplets，因此要进行以下三个操作：</p>
<ul>
<li><p>首先给 <code>nums</code> 排序。</p>
</li>
<li><p>在给result添加quadruplets的时候：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(tmp_it != hashtable.<span class="built_in">end</span>() &amp;&amp; tmp &gt;= nums[k])&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[k] == nums[j]) count++;</span><br><span class="line">    <span class="keyword">if</span>(nums[k] == nums[i]) count++;</span><br><span class="line">    <span class="keyword">if</span>(tmp == nums[k] &amp;&amp; tmp_it-&gt;second - count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result.<span class="built_in">push_back</span>(vector&lt;<span class="keyword">int</span>&gt;&#123;nums[i], nums[j], nums[k], tmp&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在那三层for循环结尾，要进行去重(以第二层for循环为例)。注意j+1&lt;n-2防止最后一次判断的时候数组越界；以及用while而不是if来消除多个重复的数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(j+<span class="number">1</span> &lt; n<span class="number">-2</span> &amp;&amp; nums[j+<span class="number">1</span>] == nums[j])</span><br><span class="line">	++j;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><strong>Solution 2：Hash Set</strong>，也是O(n^3)的时间复杂度。用了递归的思想，而且generalize到了kSum，不过它的Runtime（203ms）和Memory Usage（30MB）的排名也没好到哪里去：</p>
<ol>
<li>首先对数组排序，先确定一个数字，然后对这个数字后面的部分调用(k-1)Sum。要注意duplicate的出现</li>
<li>直到进入到2Sum。2Sum的部分就是采用了hash的思想（利用<code>unorderd_set</code>）。也要注意duplicate的出现</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://leetcode.com/problems/4sum/solution/</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(nums), <span class="built_in">end</span>(nums));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">kSum</span>(nums, target, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (start == nums.<span class="built_in">size</span>() || nums[start] * k &gt; target || target &gt; nums.<span class="built_in">back</span>() * k)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">twoSum</span>(nums, target, start);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (i == start || nums[i - <span class="number">1</span>] != nums[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;set : <span class="built_in">kSum</span>(nums, target - nums[i], i + <span class="number">1</span>, k - <span class="number">1</span>)) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;nums[i]&#125;);</span><br><span class="line">                res.<span class="built_in">back</span>().<span class="built_in">insert</span>(<span class="built_in">end</span>(res.<span class="built_in">back</span>()), <span class="built_in">begin</span>(set), <span class="built_in">end</span>(set));</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">twoSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    unordered_set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = start; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">empty</span>() || res.<span class="built_in">back</span>()[<span class="number">1</span>] != nums[i])</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">count</span>(target - nums[i]))</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123; target - nums[i], nums[i]&#125;);</span><br><span class="line">        s.<span class="built_in">insert</span>(nums[i]);  <span class="comment">// 边遍历边把元素加入hashtable里面，与在一开始就一下子把所有元素加进去相比，在防止出现duplicate时处理更方便</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>C++ Grammar：</strong></p>
<p><code>auto</code>，<code>vector.back()</code>, <code>vector.insert()</code>, <code>unorderd_set</code></p>
<p>for循环的新用法(C++14): <code>for(auto each1: vec1) &#123;&#125;//只访问不修改 for(auto &amp; each1: vec1) &#123;&#125;//可访问可修改</code></p>
<p>Use <code>vec.push_back(&#123;1, 2&#125;)</code> instead of <code>vec.push_back(vector&lt;int&gt;&#123;1, 2&#125;)</code></p>
<p><strong>Solution 1：Two Pointers</strong>，只是<code>twoSum</code> 函数的实现不同，也是O(n^3)的时间复杂度，直接贴代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://leetcode.com/problems/4sum/solution/</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">twoSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">int</span> lo = start, hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = nums[lo] + nums[hi];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target || (lo &gt; start &amp;&amp; nums[lo] == nums[lo - <span class="number">1</span>]))</span><br><span class="line">            ++lo;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target || (hi &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; nums[hi] == nums[hi + <span class="number">1</span>]))</span><br><span class="line">            --hi;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123; nums[lo++], nums[hi--]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ol start="2">
<li>善用递归简化代码</li>
<li>将大问题分解成小问题的思想，比如从kSum到(k-1)Sum….</li>
<li>考虑特殊及边界情况，比如数组中有数字相等的情况以及<code>start == nums.size() || nums[start] * k &gt; target || target &gt; nums.back() * k</code> 的情况</li>
<li>本题应用的算法：<strong>hash</strong> or <strong>two pointers</strong></li>
</ol>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hash Table</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Blog Customization Under NexT theme</title>
    <url>/hexo/hexo-blog-customization/</url>
    <content><![CDATA[<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><ol>
<li><p>run <code>npm install hexo-generator-searchdb --save</code></p>
</li>
<li><p>modify <code>_config.yml</code> in the root directory, add the following code:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>modify <code>_config.yml</code> in ./themes/next:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Show-reading-progress"><a href="#Show-reading-progress" class="headerlink" title="Show reading progress"></a>Show reading progress</h2><p>modify <code>themes/next/_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>

<h2 id="Show-number-of-visitors"><a href="#Show-number-of-visitors" class="headerlink" title="Show number of visitors"></a>Show number of visitors</h2><p>append the following code in <code>themes/next/layout/_partials/footer.swig</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;powered-by&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user-md&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">        Visitors:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">        Views:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Custom-Gallery"><a href="#Custom-Gallery" class="headerlink" title="Custom Gallery"></a>Custom Gallery</h2><p>You can create a nice and simple gallery page by using custom html and css. Reference to <a href="https://yuan901202.github.io/2019/07/31/2019-07-31-add-gallery-to-hexo/">here</a>.</p>
<h2 id="Site-map"><a href="#Site-map" class="headerlink" title="Site map"></a>Site map</h2><ol>
<li><p>run <code>npm install hexo-generator-sitemap --save</code></p>
</li>
<li><p>modify <code>_config.yml</code> in the root directory, add the following code:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generator-sitemap</span></span><br></pre></td></tr></table></figure></li>
<li><p>modify <code>_config.yml</code> in ./themes/next:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Excerption"><a href="#Excerption" class="headerlink" title="Excerption"></a>Excerption</h2><p>Solution 1: Insert <code>&lt;!--more--&gt;</code> in your article. Only content before this mark will be shown in the home page.</p>
<p>Solution 2: Install plugin to achieve auto-excerption. This way you won’t need to insert additional marks in your article.</p>
<ol>
<li><p>run <code>npm install hexo-excerpt --save</code></p>
</li>
<li><p>add the following code in <code>./_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span>  </span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Sidebar-avatar"><a href="#Sidebar-avatar" class="headerlink" title="Sidebar avatar"></a>Sidebar avatar</h2><p>modify <code>themes/next/_config.yml</code>: (Note that you can create a new folder under <code>./themes/next/source/uploads</code> and put uploaded images to there)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/uploads/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode 406] Queue Reconstrucion By Height (根据高度重建队列)</title>
    <url>/algorithm/406_queue_reconstruction/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers<code>(h, k)</code>, where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.</p>
<span id="more"></span>

<h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy:"></a>Strategy:</h3><ul>
<li>先按照身高h从高到低对(h, k)排序，如果h相同，k小的排在前面</li>
<li>新建一个空的res数组，遍历排好序后的(h, k)对，依次插入到res数组索引为k的位置即可</li>
</ul>
<p>这里有两个key point：1. 身高高的先插入；2. 每次插入的位置（索引）就是k。这样为什么可以保证是对的呢？</p>
<p>我们可以假设第i-1次插入后queue是正确的，考虑第i次插入的情形：由于是身高高的优先插入，因此当前res数组里的所有人$(h_0, k_0), …, (h_{i-1}, k_{i-1})$的身高都比即将要插入的$(h_i, k_i)$要高，所以在位置$k_i$插入对于$(h_i, k_i)$来说一定是正确，并且对于那些已经在res数组中的元素来说，新插入一个身高比他们都小的人并不会影响他们的排列。其实这就是贪心，局部最优推出全局最优，这道题则是局部正确推出全局正确。（然而我一开始并没有想出来orz）</p>
<h3 id="Implementation："><a href="#Implementation：" class="headerlink" title="Implementation："></a>Implementation：</h3><p>至于实现就比较简单了</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/grandyang/leetcode/issues/406</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), [](vector&lt;<span class="keyword">int</span>&gt;&amp; a, vector&lt;<span class="keyword">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>] || (a[<span class="number">0</span>] == b[<span class="number">0</span>] &amp;&amp; a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> a : people) &#123;</span><br><span class="line">            res.<span class="built_in">insert</span>(res.<span class="built_in">begin</span>() + a[<span class="number">1</span>], a); <span class="comment">// vector的insert时间复杂度是O(n)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h4><p>没有使用额外的空间，但多了erase的操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/grandyang/leetcode/issues/406</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), [](vector&lt;<span class="keyword">int</span>&gt;&amp; a, vector&lt;<span class="keyword">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>] || (a[<span class="number">0</span>] == b[<span class="number">0</span>] &amp;&amp; a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = people[i];</span><br><span class="line">            <span class="keyword">if</span> (p[<span class="number">1</span>] != i) &#123;</span><br><span class="line">                people.<span class="built_in">erase</span>(people.<span class="built_in">begin</span>() + i);</span><br><span class="line">                people.<span class="built_in">insert</span>(people.<span class="built_in">begin</span>() + p[<span class="number">1</span>], p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="C-Grammar"><a href="#C-Grammar" class="headerlink" title="C++ Grammar"></a>C++ Grammar</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用了lambda表达式，创建了一个匿名的函数对象</span></span><br><span class="line"><span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), [](vector&lt;<span class="keyword">int</span>&gt;&amp; a, vector&lt;<span class="keyword">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>] || (a[<span class="number">0</span>] == b[<span class="number">0</span>] &amp;&amp; a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Greedy</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode 36] Valid Sudoku (验证数独)</title>
    <url>/algorithm/36_valid_sudoku/</url>
    <content><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p>
<ol>
<li>Each row must contain the digits <code>1-9</code> without repetition.</li>
<li>Each column must contain the digits <code>1-9</code> without repetition.</li>
<li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li>
</ol>
<span id="more"></span>

<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><h4 id="Solution-0"><a href="#Solution-0" class="headerlink" title="Solution 0"></a>Solution 0</h4><p>naive的思路，将程序分为独立的三步：</p>
<ol>
<li>查看每行是否有相同的元素</li>
<li>查看每列是否有相同的元素</li>
<li>查看每个3*3的block有没有相同的元素</li>
</ol>
<p>具体实现细节上：</p>
<ul>
<li><p>使用<strong>unorderd_set（hash的方法）</strong>来分别判断每行每列每个block中是否有相同的元素，这样以上的每一步就只需$O(n^2)$的时间复杂度</p>
</li>
<li><p>注意<code>&quot;.&quot;</code>的处理</p>
</li>
</ul>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><p>由于数字是<code>1-9</code>（有9个位置），每行每列都有9个位置，每个block规定为<code>3*3</code>（也有9个位置），因此在每行或每列或每个block内，可以构建从数字到位置的一一映射，因此相同的数字会被映到相同的位置，而如果那个位置已经被其它数字“占据”了，那就说明有重复的数字。其实这也是哈希的思想，哈希就是将数字经一个函数映射到代表位置的index，再在那个index对应的位置里插入数字即可。</p>
<p>具体实现上：创建三个二维布尔型数组v1、v2、v3，分别记录各行，各列，各小方阵是否出现某个数字。在遍历9*9的矩阵的时候，将每个数字分别映射到这三个布尔型数组相应的位置上，检查那个位置是否已经1，若为1就<code>return false</code>。其中，将数字映射到v1和v2只需做这样的映射即可：<code>num-&gt;(r, num)</code>和<code>num-&gt;(num, c)</code>，而将数字映射到v3就需要做一定的转换了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">rowFlag</span>(<span class="number">9</span>, vector&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">colFlag</span>(<span class="number">9</span>, vector&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">cellFlag</span>(<span class="number">9</span>, vector&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> c = board[i][j] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rowFlag[i][c] || colFlag[c][j] || cellFlag[<span class="number">3</span> * (i / <span class="number">3</span>) + j / <span class="number">3</span>][c]) 					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                rowFlag[i][c] = <span class="literal">true</span>;</span><br><span class="line">                colFlag[c][j] = <span class="literal">true</span>;</span><br><span class="line">                cellFlag[<span class="number">3</span> * (i / <span class="number">3</span>) + j / <span class="number">3</span>][c] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h4><p>由于Solution 1需要创建三个和原数组相同大小的数组，我们可以简化一下，只用一个hash table就搞定(不过实际上并没有节省空间)。</p>
<p>由于我们要分别检查每行、每列、每个block是否有相同的元素，因此每个数字可以认为有三种互不联系的状态：在行中，在列中，在block中。我们可以将每个状态编码为1个字符串，而且只要状态不同，字符串也不同，只要状态相同，字符串也相同，具体做法为：将数字放在一个括号中，每行上的数字就将行号放在括号左边，每列上的数字就将列数放在括号右边，每个小区间内的数字就将在小区间内的行列数分别放在括号的左右两边。</p>
<p>具体实现上：在遍历9*9的矩阵的时候，将每个元素的三种状态编码成三个string，先判断unorderd_set有没有这三个状态，没有就加到unordered_set里面，有就return false</p>
<p>其实这个idea本质上和Solution 1是一样的，只不过这个解法将Solution 1的三个二维数组合在一起了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                string t = <span class="string">&quot;(&quot;</span> + <span class="built_in">to_string</span>(board[i][j]) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                string row = <span class="built_in">to_string</span>(i) + t, col = t + <span class="built_in">to_string</span>(j), cell = <span class="built_in">to_string</span>(i / <span class="number">3</span>) + t + <span class="built_in">to_string</span>(j / <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">count</span>(row) || st.<span class="built_in">count</span>(col) || st.<span class="built_in">count</span>(cell)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                st.<span class="built_in">insert</span>(row);</span><br><span class="line">                st.<span class="built_in">insert</span>(col);</span><br><span class="line">                st.<span class="built_in">insert</span>(cell);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Reference:</strong> <a href="https://github.com/grandyang/leetcode/issues/36">https://github.com/grandyang/leetcode/issues/36</a></p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ol>
<li>Solution1、2是遍历一次数组，判断每个数字是否在它所在的行或列或块上唯一；而Solution 0是遍历三次数组，每次只判断一类</li>
<li>用字符串来哈希的技巧可以借鉴</li>
</ol>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Hash Table</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装LaTeX并配置中文环境</title>
    <url>/latex/latex-chinese/</url>
    <content><![CDATA[<h2 id="Step-0-安装合适的LaTex"><a href="#Step-0-安装合适的LaTex" class="headerlink" title="Step 0: 安装合适的LaTex"></a>Step 0: 安装合适的LaTex</h2><ol>
<li>安装LaTeX的发行版，最好选择texlive-full: <code>sudo apt install texlive-full</code></li>
<li>安装xelatex编译引擎，即一个把Tex语言转换为排版的一个程序，支持unicode编码: <code>sudo apt install texlive-xetex</code></li>
<li>安装中文包，xeCJK: <code>sudo apt install texlive-lang-chinese</code></li>
<li>额外的字体支持: <code>sudo apt install texlive-fonts-extra</code></li>
</ol>
<span id="more"></span>

<h2 id="Step-1-配置Vscode使其支持LaTeX"><a href="#Step-1-配置Vscode使其支持LaTeX" class="headerlink" title="Step 1: 配置Vscode使其支持LaTeX"></a>Step 1: 配置Vscode使其支持LaTeX</h2><ol>
<li>安装 LaTeX Workshop 插件</li>
<li>打开命令面板:<code>ctrl+shift+P</code>, 写入 <code>settings.json</code> 来打开设置</li>
<li>将以下代码加入 <code>settings.json</code>:</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;latex-workshop.latex.recipes&quot;</span>: [    <span class="comment">// the first recipe is the default compile tool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,  <span class="comment">// you can change this to your compile tool if different </span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span>: [<span class="string">&quot;xelatex&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;                               <span class="comment">// the seconde recipe is the recipe chain compile</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex-&gt;bibtex-&gt;xelatex*2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;latex-workshop.latex.tools&quot;</span>:[</span><br><span class="line">    &#123;   <span class="comment">// compile tools and commands</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;latex-workshop.latex.clean.fileTypes&quot;</span>: [           <span class="comment">// (Optional)choose which kind of files to clean</span></span><br><span class="line">    <span class="string">&quot;*.aux&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;*.log&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;*.synctex.gz&quot;</span>  </span><br><span class="line">  ],  </span><br><span class="line"><span class="string">&quot;latex-workshop.latex.autoClean.run&quot;</span>: <span class="string">&quot;onBuilt&quot;</span>,    <span class="comment">// (Optional)clean auxiliary files if you want a clean working directory</span></span><br><span class="line"><span class="string">&quot;latex-workshop.latex.autoBuild.run&quot;</span>: <span class="string">&quot;never&quot;</span>,      <span class="comment">// (Optional)never auto build .tex file when the file is auto-saved</span></span><br><span class="line"><span class="string">&quot;latex-workshop.view.pdf.hand&quot;</span>: <span class="literal">true</span>,               <span class="comment">// (Optional)set default to hand mode when open pdf viewer in vscode</span></span><br></pre></td></tr></table></figure>

<h2 id="Step-2-创建tex文件测试"><a href="#Step-2-创建tex文件测试" class="headerlink" title="Step 2: 创建tex文件测试"></a>Step 2: 创建tex文件测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xeCJK&#125;  </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">中文测试</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>Note:需导入xeCJK包</p>
<p>这时候应该就可以build并view了</p>
<h2 id="Step-3-可选-导入windows中的字体"><a href="#Step-3-可选-导入windows中的字体" class="headerlink" title="Step 3: (可选)导入windows中的字体"></a>Step 3: (可选)导入windows中的字体</h2><p>ubuntu自带的中文字体较少，可以选择导入Ｗｉｎｄｏｗｓ里的字体。</p>
<p>在windows系统中找到字体文件，一般位于<code>C:\windows\fonts</code>, 再搬到ubuntu下的<code>/usr/share/fonts/</code>(当然，可以不必全部搬过来),可以重命名其为winfonts,再打开终端执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/fonts/winfonts</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">sudo fc-cache -fv</span><br></pre></td></tr></table></figure>

<p>查看字体是否存在了：　<code>fc-list :lang=zh | grep &#39;宋体&#39;</code></p>
<h2 id="Step-4-排除问题"><a href="#Step-4-排除问题" class="headerlink" title="Step 4: 排除问题"></a>Step 4: 排除问题</h2><p>这样操作下来后，build的时候我遇到了如下Warnings：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fandol is being set as the default font for CJK text.</span><br><span class="line">(xeCJK)	Please make sure it has been properly installed.</span><br><span class="line">Font &quot;FandolSong-Regular&quot; does not contain requested</span><br><span class="line">(fontspec)	Script &quot;CJK&quot;.</span><br></pre></td></tr></table></figure>
<p>虽然有warnings, 但中文还是可以正常现实的，如果要解决它们,可以换字体, 只需加入，比如： <code>\setCJKmainfont&#123;Microsoft YaHei&#125;</code>, <code>\setCJKmainfont&#123;SimSun&#125;</code></p>
<p>(事实上如果用v3.2.10 or later version的xeCJK, 使用中文字体Fandol得到时候总是会出现烦人的warning”，所以还是换字体吧…)</p>
<p>如果还是遇到 <code>Font &quot;font-name&quot; does not contain requested (fontspec)    Script &quot;CJK&quot;.</code> 的waring, 但中文又是可以正常现实的，那么只要加入 <code>\PassOptionsToPackage&#123;quiet&#125;&#123;fontspec&#125;</code> 即可, (就是简单地disable警告)</p>
<p>总之，我测试的时候，这样就可以没有警告地编译并预览了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">% \PassOptionsToPackage&#123;quiet&#125;&#123;fontspec&#125;</span><br><span class="line">\usepackage&#123;xeCJK&#125;  </span><br><span class="line">\setCJKmainfont&#123;Microsoft YaHei&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">中文测试</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubunbu下配置L2TP/Ipsec搭建vpn教程</title>
    <url>/ubuntu/ubuntu-vpn-l2tp/</url>
    <content><![CDATA[<p><code>Network Manager L2TP</code>是一个功能强大的网络工具，尤其适用于配置VPN。</p>
<h3 id="Step-1-安装-network-manager-l2tp-gnome-软件包"><a href="#Step-1-安装-network-manager-l2tp-gnome-软件包" class="headerlink" title="Step 1: 安装 network-manager-l2tp-gnome 软件包"></a>Step 1: 安装 network-manager-l2tp-gnome 软件包</h3><p>在terminal中运行：<code>sudo apt install network-manager-l2tp-gnome</code></p>
<p>如果安装包没找到，可能需要添加官方的“universe”仓库源代码：</p>
<pre><code>sudo add-apt-repository universe
sudo apt update
</code></pre>
<span id="more"></span>

<h3 id="Step-2-GUI-配置-IPsec-L2TP-VPN"><a href="#Step-2-GUI-配置-IPsec-L2TP-VPN" class="headerlink" title="Step 2: GUI 配置 IPsec/L2TP VPN"></a>Step 2: GUI 配置 IPsec/L2TP VPN</h3><p>打开“Settings”下拉找到“Network”, 然后点击“VPN +”，会出现一个新增的选项“Layer 2 Tunneling Protocol(L2Tp)”：</p>
<p><img src="ubuntu-vpn-l2tp/01.png" alt="01"></p>
<p>点击它，设置VPN Identity：</p>
<p><img src="ubuntu-vpn-l2tp/02.png" alt="02"></p>
<p>设置IPsec Setings：</p>
<p><img src="ubuntu-vpn-l2tp/03.png" alt="03"></p>
<p>设置PPP Settings:</p>
<p><img src="ubuntu-vpn-l2tp/04.png" alt="04"></p>
<p>接下来就可以进行连接了。</p>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>若连接失败，试在terminal中运行：</p>
<pre><code>sudo systemctl stop xl2tpd
sudo systemctl disable xl2tpd
</code></pre>
<p>因为可能会开启两个xl2tp，它们端口可能发生冲突。</p>
<hr>
<p><em>(注：适用Ubuntu 17.04 及以上版本。我用的是19.10 eoan)</em></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Practical Ubuntu Command Line Tips</title>
    <url>/ubuntu/ubuntu-tips/</url>
    <content><![CDATA[<h2 id="Create-a-symlink-symbolic-link-in-Ubuntu"><a href="#Create-a-symlink-symbolic-link-in-Ubuntu" class="headerlink" title="Create a symlink (symbolic link) in Ubuntu"></a>Create a symlink (symbolic link) in Ubuntu</h2><ul>
<li>Usage (Example): <code>sudo ln -s ~/Downloads/eigen/Eigen /usr/local/include/Eigen</code></li>
<li>After doing this, <code>/usr/local/include/Eigen</code> will link to the original folder <code>~/Downloads/eigen/Eigen</code>, so the compiler will be able to detect Eigen library. </li>
<li>Note: <code>-s</code> means the link is permanant ( will not disappear after rebooting ); must provide full paths rather than relative paths.</li>
</ul>
<span id="more"></span>

<h2 id="Delete-all-the-files-that-has-the-same-name-under-a-directory"><a href="#Delete-all-the-files-that-has-the-same-name-under-a-directory" class="headerlink" title="Delete all the files that has the same name under a directory"></a>Delete all the files that has the same name under a directory</h2><ul>
<li>Usage: <code>find . -name &#39;introduction.md&#39; -type f | xargs rm -rf</code></li>
</ul>
<h2 id="Open-a-directory-in-command-line-by-creating-alias"><a href="#Open-a-directory-in-command-line-by-creating-alias" class="headerlink" title="Open a directory in command line by creating alias"></a>Open a directory in command line by creating alias</h2><ul>
<li>It’s convenient to create an <code>alias</code> in <code>~/.bashrc</code>.</li>
<li>Usage: <code>gedit ~/.bashrc</code>, then add <code>alias od=&#39;nautilus --browser ~/OneDrive&#39;</code> in the file, just replace <code>od</code> by your name and <code>~/OneDrive</code> by your own directory, then save it and run <code>source ~/.bashrc</code> to update.</li>
<li>Next time you just need to open the terminal and simpy run <code>od</code> (for example) to open <code>~/OneDrive</code> directory, without having to type in the whole path.</li>
</ul>
<h2 id="Make-read-only-file-system-writable"><a href="#Make-read-only-file-system-writable" class="headerlink" title="Make read-only file system writable"></a>Make read-only file system writable</h2><ul>
<li>My NTFS file system on my ubuntu suddenly become read-only, this is perhaps because it is not properly unmounted, thus they are marked as locked.</li>
<li>Use <code>sudo ntfsfix /dev/sda3</code> to fix it. ( <code>/dev/sda3</code> is the device you want to mount )</li>
<li>However, when I then try to run <code>sudo mount /dev/sda3 /media/east</code> in terminal, it says “<code>Windows is hibernated, refused to mount.</code>“. So why it can be mounted in GUI interface but cannot do the same thing in command line ? </li>
</ul>
<h2 id="Switch-back-to-the-last-working-directory-in-terminal"><a href="#Switch-back-to-the-last-working-directory-in-terminal" class="headerlink" title="Switch back to the last working directory in terminal"></a>Switch back to the last working directory in terminal</h2><ul>
<li>Usage: cd -</li>
</ul>
<h2 id="Copy-and-paste-in-Linux-terminal"><a href="#Copy-and-paste-in-Linux-terminal" class="headerlink" title="Copy and paste in Linux terminal"></a>Copy and paste in Linux terminal</h2><ul>
<li>It depends on Linux distributions and terminal applications, but in Ubuntu (eoan), it can be achieved by :</li>
</ul>
<ol>
<li>Just simply select the text in terminal for copying. </li>
<li>And middle click for paste.</li>
</ol>
<ul>
<li>Or use keyboard shortcut: Ctrl+Shift+C for copy and Ctrl+Shift+V for paste.</li>
</ul>
<h2 id="Use-systemctl-to-manage-systemd-services"><a href="#Use-systemctl-to-manage-systemd-services" class="headerlink" title="Use systemctl to manage systemd services"></a>Use systemctl to manage systemd services</h2><ul>
<li>Usage: <ul>
<li>Create a service: (recommend in <code>/etc/systemd/system</code>; below is a common template to use )<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=start ss-local</span><br><span class="line">After=network.target</span><br><span class="line">StartLimitIntervalSec=0</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">User=username</span><br><span class="line">ExecStart=/usr/bin/ss-local -c /home/ss.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>Start a service: <code>sudo systemctl start application</code> for root user ( <code>systemctl --user start application</code> for current user ). <code>application</code> is the service name, namely, application.service.</li>
<li>Stop a service: <code>sudo systemctl stop application</code></li>
<li>Restart a service: <code>sudo systemctl restart application</code></li>
<li>To tell systemd to start services automatically at boot, you must enable them: <code>sudo systemctl enable application.service</code>; If you don’t want it afterwards, just replace <code>enable</code> by <code>disable</code> and run the command. </li>
</ul>
</li>
<li>Note: <ul>
<li><code>sudo systemctl enable application.service</code> command is quite convenient if you want to let a software start at boot. </li>
<li>After you modify services, run <code>sudo systemctl daemon-reload</code> to reload them.</li>
<li>Usually, in Ubuntu, the package provided unit files go in <code>/lib/systemd/system/</code> directory, whereas the user provided or any modification to the package provided unit files go in <code>/etc/systemd/system/</code> directory. But I’m not sure where this application.service is:  <code>systemctl --user start application</code>. </li>
</ul>
</li>
</ul>
<h2 id="Find-and-Replace-in-Ubuntu-fd-sd-rg"><a href="#Find-and-Replace-in-Ubuntu-fd-sd-rg" class="headerlink" title="Find and Replace in Ubuntu (fd, sd, rg)"></a><em>Find</em> and <em>Replace</em> in Ubuntu (fd, sd, rg)</h2><ul>
<li><p>fd –  “A simple, fast and user-friendly alternative to ‘find’”</p>
</li>
<li><p>sd – “Intuitive find &amp; replace CLI (sed alternative)”</p>
</li>
<li><p>ripgrep(rg) – “ripgrep recursively searches directories for a regex pattern”</p>
</li>
<li><p>Find all files then pass them to <code>sd</code> to replace:</p>
<ul>
<li>command: <code>fd -HI -e conf -0 --type file | xargs -0 sd --string-mode &#39;find_str&#39; &#39;replace_str&#39;</code></li>
<li>Explanation: <code>fd</code> command finds all the files with .conf suffix and pass them to <code>sd</code> command to replace. <code>-H</code> let fd additionally searches hidden directories and files; <code>-I</code> let fd searches patterns from .gitignore files; <code>-e</code> to specify a certain suffix of files (if don’t use -e then it will find all the files).</li>
<li>Note: It’s convenient to use <code>fd &#39;file_name&#39;</code> to find all files with the given file name.</li>
</ul>
</li>
<li><p>Find all files containing the given string then pass them to <code>sd</code> to replace:</p>
<ul>
<li>command: <code>rg --files-with-matches --fixed-strings &#39;find_str&#39; | xargs sd --string-mode &#39;find_str&#39; &#39;replace_str&#39;</code></li>
<li>Explanation: <code>rg</code> command finds all the files (in the current directory) with ‘find_str’ and pass them to <code>sd</code> command; <code>sd</code> command will replace ‘find_str’ with ‘replace_str’.</li>
</ul>
</li>
</ul>
<h2 id="Create-bin-directory-and-add-it-to-PATH"><a href="#Create-bin-directory-and-add-it-to-PATH" class="headerlink" title="Create ~/bin directory and add it to PATH"></a>Create ~/bin directory and add it to PATH</h2><p>You can put your own bash files in <code>~/bin</code> directory, which is easier to manage these bash files than putting them in <code>/usr/bin</code> or <code>/usr/local/bin</code>. Of course, you should add <code>PATH=&quot;$PATH:~/bin&quot;</code> to your <code>~/.bashrc</code> file. After that, if you have a file in ~/bin called <em>fn</em>, then you could simply run <em>fn</em> in the terminal from any directory to execute it.</p>
<h2 id="Grant-your-bash-shell-file-with-executable-permission"><a href="#Grant-your-bash-shell-file-with-executable-permission" class="headerlink" title="Grant your bash (shell) file with executable permission"></a>Grant your bash (shell) file with executable permission</h2><p>If you create a bash file or just a text file, and you want to execute the comands in it, you have to grant it with executable permission. Simply use <code>chmod 700 file_name</code> to change its permission (700 means owner can read(4), write(2) and execute(1)) .</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Further Properties of Probability Generating Function and its Applications</title>
    <url>/math/prob-gen-func/</url>
    <content><![CDATA[<p><strong>Abstract:</strong> Probability generating Function is the simplest one among all the gernerating functions, yet it is compact and useful in dealing with discrete random variables, especially the sum of independent random variables. This makes it a powerful tool in theory like stochastic process, where there is a need to deal with a collection of independent random variables. Therefore, it is still necessary to explore further properties of p.g.f. Two applications related to simple random walk and Galton Watson process will also be introduced in this paper.</p>
<p><strong>Keywords:</strong> probability generating function; random walk; Galton Watson process;</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Assume X is a discrete integer-valued random variable with probability mass function ${p_k = P(X=k)}<em>{k=0}^{\infty}$, its probability generating function (p.g.f) is defined by the following power series: $$P(s):=E\left(s^{X}\right)=\sum</em>{k=0}^{\infty} p_{k} s^{k} \quad|s| \leq 1$$. We know that in the discrete case, probability distribution is determined by all the possible values of the random variable and the probability corresponding to those values, which is characterized by the so-called probability mass function. Probability generating function is another way to represent and characterize a probability distribution. From the following properties, we will see that it actually “encodes&quot; everything about the distribution. Meanwhile, it makes some probability calculation easier. This is also the reason why it is a useful tool in the study of branching process or stochastic process. Note that there are other ways to transform a distribution: characteristic function, moment generating function and cumulant generating function. Many properties of probability generating function can also be applied to these functions. But they are not in the scope of this article.</p>
<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><h2 id="Probability-Generating-Function-to-Probability-Distribution"><a href="#Probability-Generating-Function-to-Probability-Distribution" class="headerlink" title="Probability Generating Function to Probability Distribution"></a>Probability Generating Function to Probability Distribution</h2><p>If we take k-th derivative of p.g.f $P_X(s) = \sum_{k=0}^{\infty} p_{k} s^{k}$, we would get:<br>$$P_X^{(k)}(s) = \frac{d^{(k)}P_{X}(s)}{ds^k} = k!p_ks^0 + c_1s^1 + … + c_ns^n, c_i = const$$<br>$$\Rightarrow P_X^{(k)}(0) = \left.\frac{d^{(k)}P_{X}(s)}{d s^{k}}\right|_{s=0} = k!p_k$$<br>$$\Rightarrow p_k = P(X = k) = \frac{1}{k!} P_X^{(k)}(0)$$ </p>
<p>Therefore, we can recover the probability distribution from the probability generating function. The p.g.f alone contains all the information about the original distribution. Since we can already derive all the probabilities of the distribution from p.g.f, it’s reasonable that we can extract properties like variance, expectation or moments of the distribution from p.g.f. . Through simple calculation, we would get (proof is omitted):</p>
<ol>
<li><p> $E(X) = P_X^{(1)}(1)$ (techniquely, it is left derivative)</p>
</li>
<li><p> $Var(X) = P_X^{(2)}(1) - [P_X^{(1)}(1)]^2 + P_X^{(1)}(1)$</p>
</li>
<li><p>$\mathbb{E}{X(X-1)(X-2) \ldots(X-k+1)}=P_{X}^{(k)}(1)$<br> (k-th derivative of p.g.f is k-th factorial moment of X. In principle you can recover all the moments from factorial moments.)</p>
</li>
</ol>
<h2 id="Uniqueness-Theorem-for-Probability-Generating-Function"><a href="#Uniqueness-Theorem-for-Probability-Generating-Function" class="headerlink" title="Uniqueness Theorem for Probability Generating Function"></a>Uniqueness Theorem for Probability Generating Function</h2><p>From section 2.1, we know that p.g.f. determines ${p_n}$, which is the distribution. Uniqueness Theorem for p.g.f. tells us additionally that it determines a unique distribution.</p>
<p><strong>Uniqueness Theorem:</strong> <em>Let X and Y be discrete random variables with probability generating functions $P_X$ and $P_Y$, respectively. Then $P_X(s) = P_Y(s)$ iff P(X=k) = P(Y=k) for all integers k $\geq$ 0, i.e. the probability generating functions are the same iff the distributions of X and Y are the same.</em><br><strong>Proof:</strong> If the distributions are the same, by the definition of p.g.f., $P_X(s) = P_Y(s)$. If $P_X(s) = P_Y(s)$, expand them into power series, $P_X(s) = \sum_{k=0}^{\infty} P(X=k)s^k = P_Y(s) = \sum_{k=0}^{\infty} P(Y=k)s^k$.<br>It follows that the coefficients of two power series must be the same, thus P(X=k) = P(Y=k) for all intergers $k \geq 0$, which means p.g.f. uniquelly determines a distribution.</p>
<h2 id="Probability-Generating-Function-of-the-Sum-of-Independent-R-V-s"><a href="#Probability-Generating-Function-of-the-Sum-of-Independent-R-V-s" class="headerlink" title="Probability Generating Function of the Sum of Independent R.V.s"></a>Probability Generating Function of the Sum of Independent R.V.s</h2><p>The main reason why p.g.f is powerful is that it makes things easier in dealing with the sum of independent random variables. It turns convolution into product:<br><strong>Theorem 1:</strong> <em>Assume $X_1, . . . , X_n$ are independent random variables. Let $Y = X_1 + . . . + X_n$. Then $$P_{Y}(s)=\prod_{i=1}^{n} P_{X_{i}}(s)$$</em> .</p>
<p><strong>Proof:</strong><br>$\begin{aligned} P_{Y}(s) &amp;=\mathbb{E}\left(s^{\left(X_{1}+\ldots+X_{n}\right)}\right) \ &amp;=\mathbb{E}\left(s^{X_{1}} s^{X_{2}} \ldots s^{X_{n}}\right) \ &amp;=\mathbb{E}\left(s^{X_{1}}\right) \mathbb{E}\left(s^{X_{2}}\right) \ldots \mathbb{E}\left(s^{X_{n}}\right) ; (since ; X_1, …, X_n ; are ; independent) \end{aligned}$<br>$\Rightarrow P_Y(s) =\prod_{i=1}^{n} P_{X_{i}}(s) . \quad$</p>
<p>If we don’t know how many random variable are in the sum, i.e. n is not fixed, instead, it is itself a random variable (say N), then we have the following theorem:<br><strong>Theorem 2:</strong> <em>Let $X_1, X_2, . . .$ be a sequence of i.i.d random variables with common p.g.f. $P_X(s)$. Let N be a random variable, independent of $X_i$, with p.g.f $P_N(s)$, and let $S_N = X_1+. . .+X_N$. Then $$P_{S_N}(s) = P_N(P_X(s))$$</em> </p>
<p><strong>Proof:</strong><br>$\begin{aligned} P_{S_{N}}(s) &amp;=\mathbb{E}\left(s^{S_{N}}\right)=\mathbb{E}\left(s^{X_{1}+\ldots+X_{N}}\right) \ &amp;=\mathbb{E}<em>{N}\left{\mathbb{E}\left(s^{X</em>{1}+\ldots+X_{N}} \mid N\right)\right} \quad(\text { law of total probability for expectations }) \ &amp;=\mathbb{E}<em>{N}\left{\mathbb{E}\left(s^{X</em>{1}} \ldots s^{X_{N}} \mid N\right)\right} \ &amp;=\mathbb{E}<em>{N}\left{\mathbb{E}\left(s^{X</em>{1}} \ldots s^{X_{N}}\right)\right} \quad\left(X_{i} \text { are independent of } N\right) \<br>&amp;=\mathbb{E}<em>{N}\left{\mathbb{E}\left(s^{X</em>{1}}\right) \ldots \mathbb{E}\left(s^{X_{N}}\right)\right} \quad\left(X_{i}\right.\text{ are independent of each other})\<br>&amp;=\mathbb{E}<em>{N}\left{\left(P</em>{X}(s)\right)^{N}\right} \quad\text{(by definition of }\left.P_{X}\right)\<br>&amp;=P_{N}\left(P_{X}(s)\right) \quad\text{(by definition of }\left.P_{N}\right)<br>\end{aligned}$</p>
<p>This theorem helps us to compute the p.g.f. (equivalently, finding the distribution) of the sum of i.i.d. R.V. when the number of random variables is random.<br>Note that we could get the basic version of <strong>Wald’s Identity</strong> using the above result: $$\begin{aligned}<br>    P_{S_N} &amp;= P_N \circ P_X\<br>    P_{S_N}^{‘}(s) &amp;= P_X^{‘}(s) {P_N^{‘}(P_X(s))}\<br>    P_{S_N}^{‘}(1) &amp;= P_X^{‘}(1) {P_N^{‘}(P_X(1))}\<br>    E(S_N) &amp;= E(N)E(X) = E(N)E(X_1)\end{aligned}$$</p>
<h2 id="Convergence-of-Probability-Generating-Function"><a href="#Convergence-of-Probability-Generating-Function" class="headerlink" title="Convergence of Probability Generating Function"></a>Convergence of Probability Generating Function</h2><p>Note that in the definition of probability generating function, it simply assumes that $|s| \leq 1$ (the radius of convergence = 1) to ensure the power series will converge. Though it is a sufficient condition for the convergence of p.g.f, it is not necessary. In many cases, the radius of convergence can &gt; 1. We now explore the convergence property of p.g.f. starting from some simple facts.</p>
<p><strong>Theorem 1:</strong> <em>p.g.f. must converge (point-wise) for at least$ s \in [-1,1]$</em>.<br><strong>Proof:</strong> Suppose p.g.f $P_X(s) = \sum_{k=0}^{\infty} p_{k} s^{k}$.<br>$\forall -1 \leq s \leq 1$, series ${s^k}$ is monotonous and bounded,<br>and $\sum_{k=0}^{\infty} p_k$ converges, so by Albel’s test, series<br>$\sum_{k=0}^{\infty} p_{k} s^{k}$ converges.<br><strong>Remark:</strong> The radius of convergence for p.g.f is at least 1.</p>
<p><strong>Theorem 2:</strong> <em>Suppose p.g.f. converges on (-R, R), i.e., the radius of convergence is R, then p.g.f. converges uniformly on any closed set [-r,r] where 0 &lt; r &lt; R</em>.<br><strong>Proof:</strong> $\forall 0 &lt; r &lt; R$, $\sum_{k=0}^{\infty} |p_{k} r^{k}|$ converges. So $|p_kx^k| \leq |p_kr^k|$ when $|x| \leq r$. By Weierstrass’s Theorem, $\sum_{k=0}^{\infty} p_{k} x^{k}$ converges uniformly on [-r,r].<br><strong>Remark:</strong> If p.g.f. converges on a closed set [-R, R], then it must converges uniformly on [-R, R]. Let R = 1, then we can get that p.g.f. must converge uniformly on [-1, 1].</p>
<p><strong>Theorem 3:</strong> <em>Suppose p.g.f. converges on (-R, R), then p.g.f. is continuous on (-R, R).</em><br><strong>Proof:</strong> For any $x_0 \in (-R, R)$, there must exist $r &gt; 0$, s.t. $x_0 \in [-r,r] \subset (-R,R)$. Since p.g.f. converges uniformly on [-r,r], so p.g.f. is continuous at $x_0$. Since $x_0$ can be chosen arbitrarily in (-R,R), so p.g.f. is continuos at every point in (-R,R).</p>
<p><strong>Theorem 4:</strong> <em>Suppose p.g.f converges at the right (left) end of interval (-R,R), then p.g.f. is left (right) continuos at this end.</em><br><strong>Proof:</strong> Without loss of generality, assume p.g.f. converges at x = R.<br>We only need to prove $\sum_{k=0}^{\infty} p_ks^k$ converges uniformly on [0,R].<br>$\sum_{k=0}^{\infty} p_ks^k = \sum_{k=0}^{\infty} p_kR^k(\frac{s}{R})^k$,<br>because $\sum_{k=0}^{\infty} p_kR^k$ converges, ${(\frac{s}{R})^n}$ monotonically decreasing and uniformly bounded, so by Abel’s test, $\sum_{k=0}^{\infty} p_ks^k$ converges uniformly on [0, R].<br><strong>Remark:</strong> Let R = 1, by the theorem we can get that $P_X(1) = P_X(1^-)$, and $P_X(-1) = P_X(-1^+)$, i.e., p.g.f. is continuous at both ends of (-1, 1). If R &gt; 1, p.g.f. may not be continuos on its ends.</p>
<h1 id="Theoretical-Applications"><a href="#Theoretical-Applications" class="headerlink" title="Theoretical Applications"></a>Theoretical Applications</h1><h2 id="The-first-reaching-time-in-simple-random-walk"><a href="#The-first-reaching-time-in-simple-random-walk" class="headerlink" title="The first reaching time in simple random walk"></a>The first reaching time in simple random walk</h2><h3 id="Model-construction"><a href="#Model-construction" class="headerlink" title="Model construction:"></a>Model construction:</h3><p>Random walk is a Stochastic Process that describes a path that consists a succession of random steps on some mathematical space. Probability generating function is especially useful in this area due to its good property in computing independent sum of random variables. Here we only consider one dimensional random walk on the real line and the length of each step is a constant (assume is 1). Let $S_n$ denotes the position of the object at the n-th step. $X_1, …, X_n$ denotes each step’s behavior, i.e., $X_i = 1$ if at i-th step the object moves right on the axis and $X_i = -1$ if moves left. The probability that the object will move right at each step is p.</p>
<h3 id="The-p-g-f-distribution-of-the-first-reaching-time"><a href="#The-p-g-f-distribution-of-the-first-reaching-time" class="headerlink" title="The p.g.f. (distribution) of the first reaching time:"></a>The p.g.f. (distribution) of the first reaching time:</h3><p>In this section, we aim to use probability generating funciton to find the distribution of reaching times of the object. The reaching time is defined as $T_{i,j} :=$ “the first time to reach position j from position i&quot;. We will concentrate on the situation when i = 0, j = 1, and assmue its distribution is characterized by p.m.f $p_n = P(T_{0,1} = n)$, then the goal is to find ${p_n}$, which is the distribution of the random varible $T_{0,1}$.</p>
<p>Firstly, $p_1 = 1$ is obvious. When n &gt; 1, the object must have to go left to position -1 first and then reach 1 through the following (n-1) steps. Additionally, we can decompose those (n-1) steps into two phases: moving from -1 to 0, then moving from 0 to 1. So by the law of total probability we can get: $$\begin{aligned}<br>p_n &amp;= \sum_{j=1}^{n-2} qP(\text{<code>j steps to first reach 0 from -1&quot; and </code>n-j-1 steps to first reach 1 from 0”)}\<br>&amp;= q\sum_{j=1}^{n-2} P(T_{-1,0}=j \quad and \quad T_{0,1} = n-1-j) \end{aligned}$$<br>Intuitively, we can sense that the event “j steps to first reach 0 from -1&quot; won’t have any effect on the event “n-i-j steps to first reach 1 from 0&quot;, which means for any given j P($T_{0,1}$=n-1-j) = P($T_{0,1}$=n-1-j | $T_{-1,0}$=j). So it’s reasonable to regard two events as independent. This is the regeneration property of random walk.<br>With independence, we can get: $$\begin{aligned}<br>p_{n} &amp;= q\sum_{j=1}^{n-2} P(T_{-1,0}=j)P(T_{0,1} = n-1-j)\<br>&amp;= q\sum_{j=1}^{n-2} P(T_{0,1}=j)P(T_{0,1} = n-1-j)\<br>&amp;= q \sum_{j=1}^{n-2} p_{j} p_{n-j-1}, \quad n \geq 3, \quad p_{0}=0, \quad p_{1}=p, \quad p_{2} = 0\end{aligned}$$<br>It is hard to solve distribution $p_n$ from the above equation since it contains a form of convolution. But we can use gernerating function method to convert it into product to reduce complexity of computation:<br>$$\begin{aligned}<br>\text{by definition of p.g.f. , } P_X(s) &amp;= \sum_{k=0}^{\infty} p_ks^k\<br>\Rightarrow (P_X(s))^2 &amp;= \sum_{k=0}^{\infty}\left(\sum_{i=0}^{k} p_{i} p_{k-i}\right) s^{k}\<br>\sum_{i=0}^{k} p_ip_{k-i} &amp;= p_0p_k + p_kp_0 + \sum_{i=1}^{(k+1)-2} p_ip_{(k+1)-i-1}, \quad k \geq 2\<br>&amp;= \frac{p_{k+1}}{q}, \quad k \geq 2\<br>\Rightarrow q(P_X(s))^2 &amp;= \sum_{k=2}^{\infty} p_{k+1} s^k\<br>qs(P_X(s))^2 &amp;= \sum_{k=2}^{\infty} p_{k+1}s^{k+1} = \sum_{k=0}^{\infty} p_ks^k - sp = P_X(s) - sp\<br>\text{solving the quadratic equation, }\Rightarrow P_X(s) &amp;= \frac{1-\sqrt{1-4 p q s^{2}}}{2 q s}, \quad |s| \leq \frac{1}{2 \sqrt{p q}}\end{aligned}$$<br>By now we successfully get the p.g.f. of $T_{0,1}$. From section 2 above, we know that p.g.f. characterizes a unique distribution of a random variable, and we can extract useful information only through p.g.f. without calculating its “real distribution&quot; ${p_n}$. There are two major information concerned in this random walk example.</p>
<h3 id="The-probability-that-the-object-will-never-reach-1-from-0"><a href="#The-probability-that-the-object-will-never-reach-1-from-0" class="headerlink" title="The probability that the object will never reach 1 from 0:"></a>The probability that the object will never reach 1 from 0:</h3><p>Since p.g.f. is defined as $P_X(s) = \sum_{k=0}^{\infty} p_ks^k ; (|s| \leq 1)$, $P_X(1) = \sum_{k=0}^{\infty} p_k = P(X &lt; \infty)$, thus if random variable X can take value $\infty$, i.e., $P(X=\infty) &gt; 0$, then $P_X(1) = 1 - P(X = \infty) &lt; 1$, and vice versa. So to determine if a random variable can take value $\infty$, one way is to check if $P_X(1)$<br>is &lt; 1.</p>
<p>In this case, event “the object may never reach 1 from 0&quot; is equivalent with $P(T_{0,1}=\infty) &gt; 0$, so we only need to examine the value of $P_X(1)$. If $P_X(1) = 1$, $P(T_{0,1}=\infty) = 0$; Else,<br>$P(T_{0,1}=\infty) &gt; 0$:<br>$P_X(1)=\frac{1-\sqrt{1-4 p q}}{2 q}=\frac{1-|p-q|}{2 q}=\left{\begin{array}{ll}<br>    1, &amp; p \geq \frac{1}{2} \<br>    \frac{p}{q} &lt; 1, &amp; p&lt;\frac{1}{2}<br>    \end{array}\right.$.<br>So the conclution is: the object will definitely reach position 1 from position 0 when $p \geq 0.5 \Leftrightarrow p \geq q$, no matter how long it takes; but when $p &lt; 0.5 \Leftrightarrow p &lt; q$, it is possible that the object will never reach 1 from 0, with probability $1-\frac{p}{q}$.</p>
<h3 id="Expected-time-number-of-steps-to-first-reach-1-from-0"><a href="#Expected-time-number-of-steps-to-first-reach-1-from-0" class="headerlink" title="Expected time (number of steps) to first reach 1 from 0:"></a>Expected time (number of steps) to first reach 1 from 0:</h3><p>Since we can easily extract expectation (first-order moment) of a random variable from its p.g.f., so we again apply generating function method to find expected time to reach 1 from 0, i.e., $E(T_{0,1})$. It should be emphasized that in this case $E(T_{0,1})$ may not equal to $P_{T_0}^{\prime}(1)$. This is because $T_{0,1}$ may take value of infinity but p.g.f. only defines for finite values.</p>
<ol>
<li><p>If $p &lt; 0.5$, then $P(T_{0,1} = \infty) &gt; 0$, so by definition of<br>expection we have $E(T_{0, 1}) = \infty$.</p>
</li>
<li><p>If $p = 0.5$,<br>$P_X^{\prime}(s)=\frac{2 p}{\sqrt{1-4 p q s^{2}}}-\frac{1-\sqrt{1-4 p q s^{2}}}{2 q s^{2}}$,<br>$E(T_{0,1}) = \lim _{s \rightarrow 1^-} P_X^{\prime}(s)=\lim _{s \rightarrow 1^-}\left(\frac{1}{\sqrt{1-s^{2}}}-\frac{1-\sqrt{1-s^{2}}}{s^{2}}\right)=+\infty$.<br>This means even if the object will definitely reach 1, the expected<br>reaching time, however, is $\infty$.</p>
</li>
<li><p>If $p &gt; 0.5$,<br>$E(T_{0,1}) = \lim _{s \rightarrow 1^-} P_X^{\prime}(s) = P_X^{\prime}(1) = \frac{1}{p-q}$.</p>
</li>
</ol>
<h2 id="The-population-size-in-Galton-Watson-process"><a href="#The-population-size-in-Galton-Watson-process" class="headerlink" title="The population size in Galton Watson process"></a>The population size in Galton Watson process</h2><h3 id="Model-Construction"><a href="#Model-Construction" class="headerlink" title="Model Construction:"></a>Model Construction:</h3><p>At 0-th generation, there is one individual. It reproduces offsprings and then dies, these offsprings are then belong to 1-th generation. Afterwards, each of these offsprings can continue the same reproductionprocess, producing more and more generations.</p>
<p>Now define $Z_n$ as the population size at n-th generation (i.e. the number of individuals at n), clealy $Z_0 = 1$. Y is the number of offsprings of an individual. Each individual’s family size (i.e. number of offsprings) $Y_1, Y_2, … ; i.i.d. \sim Y$.</p>
<h3 id="The-p-g-f-distribution-of-Z-n"><a href="#The-p-g-f-distribution-of-Z-n" class="headerlink" title="The p.g.f. (distribution) of $Z_n$:"></a>The p.g.f. (distribution) of $Z_n$:</h3><p>To know the information of n-th generation, first consider (n-1)-th generation. Assume each individual in (n-1)-th generation is labelled $1, …, Z_{n-1}$, and their number of offsprings is given by $Y_1, …, Y_{Z_{n-1}}$. Then we can get a formula: $Z_n = \sum_{i=1}^{Z_{n-1}} Y_i$. This means $Z_n$ is the sum of i.i.d. random variables with random quantity. Section 2.3 shows that probability generating function will be a useful tool in dealing with this kind of problem.</p>
<p>Let $P_Y(s)$, $P_{Z_n}(s)$, $P_{Z_{n-1}}(s)$ be the p.g.f. of random<br>variables $Y, Z_{n}, Z_{n-1}$.<br>Since $Z_n = \sum_{i=1}^{Z_{n-1}} Y_i$, by theorem 2 from section 2.3,<br>we can find a recursion formula for the p.g.f. of $Z_n$:<br>$P_{Z_n}(s) = P_{Z_{n-1}}(P_Y(s))$.<br>Continue iterating, we will get p.g.f. for $Z_n$:<br>$P_{Z_n}(s)=\underbrace{P_Y(P_Y(P_Y(\ldots P_Y(s) \ldots))}<em>{n \text { times }})$.<br>Note that $Z_1 = Y$, then we have the following important recursion furmula.<br><strong>Branching process recursion formula:</strong><br>$$P</em>{Z_n}(s)=\underbrace{P_{Z_1}(P_{Z_1}(P_{Z_1}(\ldots P_{Z_1}(s) \ldots))}<em>{n \text { times }}) = P</em>{Z_{n-1}}(P_{Z_1}(s)) = P_{Z_1}(P_{Z_{n-1}}(s))$$<br>Remark: In many cases it’s not easy to solve the explicit expression of p.g.f. from the above formula when n is large, but for any distribution Y we can use it to work out the mean and variance of $Z_n$.</p>
<h3 id="Mean-and-variance-of-Z-n"><a href="#Mean-and-variance-of-Z-n" class="headerlink" title="Mean and variance of $Z_n$:"></a>Mean and variance of $Z_n$:</h3><p>Now we proceed to extract information about the distribution of $Z_n$ using p.g.f. and some of the consequences obtained in previous sections.</p>
<p><strong>Theorem 1 (Mean):</strong> *Let $E(Y) = \mu$, if $\mu &lt; \infty$, then $E(Z_n) = \mu^n$.*<br>**Proof:** Since $P_{Z_n}(s) = P_{Z_{n-1}}(P_Y(s))$, derivative on both sides (or directly use Wald’s Identity introduced previously) will get: $E(Z_n) = E(Y)E(Z_{n-1}) = \mu E(Z_{n-1}) = \mu^2 E(Z_{n-2}) = … = \mu^n$.<br>**Remark:** In natural language, if each individual is expected to reproduce $\mu$ offsprings, then it is expected to have $\mu^n$ individuals at n-th generation. This implicates a fact that if $\mu &gt; 1$, the population size will grow exponentially by generation; if $\mu &lt; 1$, the population size will decrease exponentially by<br>generation.</p>
<p><strong>Theorem 2 (Variance):</strong> <em>Let $E(Y) = \mu$, $Var(Y) = \sigma^2$, if$\ u &lt; \infty$ and $\sigma^2 &lt; \infty$, then<br>$V_n = \operatorname{Var}\left(Z_{n}\right)=\left{\begin{array}{cl}<br>    \sigma^{2} n &amp; \text { if } \mu=1 \<br>    \sigma^{2} \mu^{n-1}\left(\frac{1-\mu^{n}}{1-\mu}\right) &amp; \text { if } \mu \neq 1<br>    \end{array}\right.$</em><br><strong>Proof:</strong><br>$\begin{aligned}<br>    Z_{n} &amp;=\sum_{i=1}^{Z_{n-1}} Y_{i} \<br>    \Rightarrow \operatorname{Var}\left(Z_{n}\right) &amp;=\left{\mathbb{E}\left(Y\right)\right}^{2} \times \operatorname{Var}\left(Z_{n-1}\right)+\operatorname{Var}\left(Y\right) \times \mathbb{E}\left(Z_{n-1}\right)\<br>    \Rightarrow \quad V_{n} &amp;=\mu^{2} V_{n-1}+\sigma^{2} \mathbb{E}\left(Z_{n-1}\right) \<br>    \Rightarrow \quad V_{n} &amp;=\mu^{2} V_{n-1}+\sigma^{2} \mu^{n-1}<br>\end{aligned}$<br>It is then easy to get the result.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This article mainly covers all the important properties of probability generating function and uses two small examples to illustrate how p.g.f. works and why it is useful. The two examples introduced are just two basic and fundamental topics in the theory of random walk and branching process. If dig further, we can still use generation function method to analyze some classic problems like the Gambler’s Ruin or the Extinction Problem. These theoretical results can be applied in many aspects of the real world like in Demography or Econometrics.</p>
<hr>
<p><strong>References:</strong> </p>
<p>$<a href="https://en.wikipedia.org/wiki/Generating/_function$">https://en.wikipedia.org/wiki/Generating\_function$</a><br>$<a href="https://en.wikipedia.org/wiki/Branching/_process/#Extinction\_problem\_for\_a\_Galton\_Watson\_process$$https://web.ma.utexas.edu/users/gordanz/notes/advanced\_random\_walks\_color.pdf$">https://en.wikipedia.org/wiki/Branching\_process\#Extinction\_problem\_for\_a\_Galton\_Watson\_process$$https://web.ma.utexas.edu/users/gordanz/notes/advanced\_random\_walks\_color.pdf$</a><br>$<a href="https://www.stat.auckland.ac.nz//sim">https://www.stat.auckland.ac.nz/\sim</a> fewster/325/notes/ch6.pdf$<br>$<a href="https://www.stat.auckland.ac.nz//sim">https://www.stat.auckland.ac.nz/\sim</a> fewster/325/notes/ch4.pdf$<br>$<a href="https://www.dartmouth.edu//sim">https://www.dartmouth.edu/\sim</a> chance/teaching_aids/books_articles/probability_book/Chapter10.pdf$</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Probability and Statistics</tag>
      </tags>
  </entry>
</search>
